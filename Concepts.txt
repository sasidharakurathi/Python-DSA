
1. Arrays (Lists)
    Two Pointers                                                                            -> Done
    Sliding Window                                                                          -> Done

2. Stacks
    Stack                                                                                   -> Done
    Min Stack                                                                               -> Done
    Two Stacks in One Array                                                                 -> Done
    Stack Using Queues                                                                      -> Done
    K Stacks in a Single Array
    Stack with Middle Element Access (Use Double Linked List)                               -> Done

3. Queues
    Linear Queue                                                                            -> Done
    Circular Queue                                                                          -> Done
    Deque (Double-Ended)                                                                    -> Done
    Queue using Stack                                                                       -> Done

4. Hashing
    Hashmap (using dictionaries)                                                            -> Done
    Hashsets (using sets)                                                                   -> Done
    Hashing Strings                                                                         -> Done
    Custom Hashing for Tuples or Complex Key                                                -> Done

5. Linked Lists
    Singly Linked List                                                                      -> Done
    Doubly Linked List                                                                      -> Done
    Circular Linked List                                                                    -> Done
    Unrolled Linked List

6. Binary Search
    Standard Binary Search – Find an element in a sorted array.                             -> Done
    Lower Bound / Upper Bound – First element ≥ target / First element > target.            -> Done
    Search Insert Position – Where to insert an element to keep array sorted.               -> Done
    First and Last Occurrence – Especially useful for duplicates.                           -> Done

7. Tree
    Binary Tree
        Types:
            1. Full Binary Tree         - (Every node must have 0 or 2 Child nodes)
            2. Perfect Binary Tree      - (it is a Full Binary Tree + all the leaf nodes should be in same level)
            3. Complete Binary Tree     - (all the levels of the tree are filled completely except the lowest level nodes which are filled from as left as possible)
            4. Degenerate Binary        - (Every node must have 0 or 1 Child nodes)  
            5. Skewed Tree              - (Every node must have 0 or 1 Child nodes + all childs should be left or right of root node)
            6. Balanced Binary          - (Difference of all the 'left subtree and right subtree' should be in [-1,0,1] only)  


    Binary Search Tree (BST)

    Traversals:
        -> use inorder traversal for Binary Search Tree Validation          -   (implemented using stack or recursion)
        -> use preorder traversal for tree cloning or expression trees      -   (implemented using stack or recursion)
        -> use postorder traversal for deletion or evaluation               -   (implemented using stack or recursion)
        -> use level order traversal for shortest path or tree width        -   (implemented using queue)





8. Heaps (Priority Queues)
9. Back Tracking
10. Graphs
11. Dynamic Programming
12. Tries